#!/usr/bin/env ruby
require 'pathname'

base_path = Pathname(__FILE__).dirname.parent.expand_path
CONFIG_PATH = "#{base_path}/lib/config_gui.rb"
$LOAD_PATH.unshift("#{base_path}/lib")

require 'config_gui'

class AddUser
  def initialize
    get_current_users
    @body = ""
    open(CONFIG_PATH, "r") do |f|
      @body = f.read
    end
  end

  def duplicate_check(name)
    @root_user.include?(name) | @normal_user.include?(name)
  end

  def save_data(name, passwd, gravatar, role)
    new_user = "{:username => '#{name}', :password => '#{passwd}', :email => '#{gravatar}' }"
    replace_user(new_user, role)
    write_config
    puts "ADDED\r\n\t{:username => '#{name}', :password => '#{passwd.gsub(/./, '*')}', :email => '#{gravatar}' }"
  end

  def brank_check(str)
    while str == '' do
      print "> "
      str = gets.chomp!
    end
    str
  end 

  private

  def get_current_users
    @root_user = []
    @normal_user = []
    ConfigGui::ROOT_USER.each{|info|
      @root_user << info[:username]
    }
    ConfigGui::NORMAL_USER.each{|info|
      @normal_user << info[:username]
    }
  end

  def replace_user(new_user, role)
    if role == 'root'
      mode = "ROOT_USER"
    elsif role == 'normal'
      mode = "NORMAL_USER"
    end
    @body =~ /(#{mode} = \[[^\]]*)\]/ 
    @body.gsub!(/#{mode} = \[[^\]]*\]/, "#{$1}\s\s#{new_user},\n\s\s]")
  end

  def write_config
    open(CONFIG_PATH, "r+") {|f|
      f.flock(File::LOCK_EX)
      f.puts @body
      f.truncate(f.tell)
    }
  end

end # end of class AddUser


begin
  manager = AddUser.new
  puts "\e[H\e[2J"
  
  ### user name
  print "Please input user name\r\n> "
  name = manager.brank_check(gets.chomp!)
  while manager.duplicate_check(name)
    print "\r\n[#{name}] has already been used."
    print "\r\nSo please input another user name or delete this user\r\n> "
    name = manager.brank_check(gets.chomp!)
  end
  puts "\r\n"

  ### passeword
  print "Please input password\r\n> "
  passwd = manager.brank_check(gets.chomp!)
  puts "\r\n"

  ### gravatar
  print "[Optional]\r\nPlease input Gravatar email address.\r\n(If you don't need this process, please push enter with brank.)\r\n> "
  gravatar = gets.chomp!

  ### role
  role = ''
  print "Which mode do you want to add this user?\r\n(some functions are restricted to root user only)\r\n"
  loop do 
    print "[1] root user\r\n[2] normal user\r\n> "
    r = gets.to_i
    if r == 1
      role = 'root'
      break
    elsif r == 2
      role = 'normal'
      break
    else
      next
    end
  end
  
  ### result
  puts "\e[H\e[2J"
  
  puts "=============================================="
  puts "user name  : #{name}"
  puts "password   : #{passwd.gsub(/./, '*')}"
  puts "email      : #{gravatar}"
  puts "role       : #{role}"
  puts "=============================================="
  puts "\r\n"
  
  print "Would this be OK?(y/n)\r\n> "
  confirm = manager.brank_check(gets.chomp!)
  if confirm =~ /^(y|yes)$/
    manager.save_data(name, passwd, gravatar, role)
  else
    puts "add_user process was cancelled."
  end

rescue
  puts "Unexception Error was happened.\r\nPlease execute again or input conf file directly"
end
